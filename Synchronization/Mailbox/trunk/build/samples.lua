--
-- sample.lua
--
-- Premake build script for samples
--
-- Copyright (c) 2004-2008, Applied Informatics Software Engineering GmbH.
-- and Contributors.
--
-- Permission is hereby granted, free of charge, to any person or organization
-- obtaining a copy of the software and accompanying documentation covered by
-- this license (the "Software") to use, reproduce, display, distribute,
-- execute, and transmit the Software, and to prepare derivative works of the
-- Software, and to permit third-parties to whom the Software is furnished to
-- do so, all subject to the following:
--
-- The copyright notices in the Software and this entire statement, including
-- the above license grant, this restriction and the following disclaimer,
-- must be included in all copies of the Software, in whole or in part, and
-- all derivative works of the Software, unless such copies or derivative
-- works are solely in the form of machine-executable object code generated by
-- a source language processor.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
-- SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
-- FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
-- ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
-- DEALINGS IN THE SOFTWARE.
--

-- Here are the lists of samples to build. Add/remove new
-- samples here and everything else should just work

local samples =
{
    -- add more sample here and this script will build them all
    "Abstract",
    "Array",
    "Basic",
    "BlockExit",
    "Factory",
    "Handle",
    "IncompleteType",
    "Pimpl",
    "PreventDelete",
    "Void",
    "StaticObject"
}

-- Output is placed in a directory named for the target toolset.
packagepath = options["target"]


-- Factory function for sample packages

function makesample(index, name)

    package = newpackage()
    package.name = "sample" .. name
    package.kind = "exe"
    package.language = "c++"
    package.path = packagepath
    package.objdir = "obj/"..name
    package.bindir = "../../bin"

    -- add prefix and postfix for different configurations
    package.config["debug_shared"].target= package.name .."Sharedd"
    package.config["release_shared"].target= package.name .."Shared"
    package.config["debug_static"].target= package.name .. "d"
    package.config["release_static"].target= package.name

    table.insert(package.config["debug_static"].defines, "POCO_STATIC")
    table.insert(package.config["release_static"].defines, "POCO_STATIC")

    if (not windows) then

        table.insert(package.config["debug_shared"].buildoptions, "-shared")
        table.insert(package.config["release_shared"].buildoptions, "-shared")

        -- for cygwin
        if(windows) then
        table.insert(package.config["release_shared"].buildoptions, "-mwindows")
        table.insert(package.config["debug_shared"].buildoptions, "-mwindows")
        end

    end

    package.includepaths =
    {
        "../../Foundation/include"
    }

    package.defines = { "_CRT_SECURE_NO_DEPRECATE" }

    package.links = { "Foundation"}

    package.files = { "../../Foundation/samples/sample" .. name .. ".cpp" , "../../Foundation/samples/sample" .. name .. ".h"}

    package.libpaths =
    {
        "../../lib"
    }

    if (linux) then
        table.insert(package.links, "pthread")
    end

    if (windows) then
        table.insert(package.defines, "WIN32")
    end

    if (not options["enable-static-only"]) then
    end
    if (not options["enable-shared-only"]) then
        table.insert(package.config["debug_static"].defines, "POCO_STATIC")
        table.insert(package.config["release_static"].defines, "POCO_STATIC")
    end

end

table.foreach(samples, makesample)

