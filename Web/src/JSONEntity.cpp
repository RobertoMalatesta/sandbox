//
// JSONEntity.cpp
//
// $Id: //poco/Main/Web/src/JSONEntity.cpp#7 $
//
// Library: Web
// Package: Configuration
// Module:  JSONEntity
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Web/JSONEntity.h"
#include "Poco/Exception.h"
#include "Poco/String.h"
#include <ostream>


using Poco::Dynamic::Var;
using Poco::replaceInPlace;
using Poco::InvalidArgumentException;


namespace Poco {
namespace Web {


std::ostream& operator << (std::ostream &os, const JSONEntity& ent)
{
	switch (ent.type())
	{
	case JSONEntity::JSON_T_INTEGER:
		os << ent.toInteger(); break;
	case JSONEntity::JSON_T_FLOAT: 
		os << ent.toFloat(); break;
	case JSONEntity::JSON_T_STRING: 
	case JSONEntity::JSON_T_KEY:
		os << ent.toString(); break;
	case JSONEntity::JSON_T_TRUE:
		os << "true"; break;
	case JSONEntity::JSON_T_FALSE:
		os << "false"; break;
	case JSONEntity::JSON_T_NULL:
		os << "null"; break;
	case JSONEntity::JSON_T_ARRAY_BEGIN:
		os << '['; break;
	case JSONEntity::JSON_T_ARRAY_END:
		os << ']'; break;
	case JSONEntity::JSON_T_OBJECT_BEGIN:
		os << '{'; break;
	case JSONEntity::JSON_T_OBJECT_END:
		os << '}'; break;
	case JSONEntity::JSON_T_VALUE_SEPARATOR:
		os << ','; break;
	default:
		throw InvalidArgumentException("Unknown value type.");
	}

	return os;
}


JSONEntity::JSONEntity(): _type(JSON_T_NONE)
{
}


JSONEntity::JSONEntity(Type type, const Var& value): _type(type)
{
	switch (type)
	{
		case JSON_T_INTEGER:
		case JSON_T_FLOAT:
		case JSON_T_STRING:
		case JSON_T_KEY:
			_value = value;
			break;
		default:
			poco_assert (value.isEmpty());
			break;
	}
}


JSONEntity::~JSONEntity()
{
}


std::string JSONEntity::encode(const String& str) 
{ 
	std::string result;
	std::string::const_iterator it = str.begin();
	std::string::const_iterator end = str.end();
	for (; it != end; ++it)
	{
		switch (*it)
		{
			case '"':
				result.append("\\\"");
				break;
			case '\\':
				result.append("\\");
				break;
			case '/':
				result.append("\\/");
				break;
			case '\b':
				result.append("\\b");
				break;
			case '\f':
				result.append("\\f");
				break;
			case '\n':
				result.append("\\n");
				break;
			case '\r':
				result.append("\\r");
				break;
			case '\t':
				result.append("\\t");
				break;
			//TODO: Unicode
			default:
				result.append(1, *it);
		}
	}
    return result;
}


} } // namespace Poco::Web
