//
// DirectHandler.h
//
// $Id: //poco/Main/Web/include/Poco/Web/DirectHandler.h#2 $
//
// Library: Web
// Package: Configuration
// Module:  DirectHandler
//
// Definition of the DirectHandler class.
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef Web_DirectHandler_INCLUDED
#define Web_DirectHandler_INCLUDED


#include "Poco/Web/Web.h"
#include "Poco/Web/JSONHandler.h"
#include "Poco/Web/ExtJS/DirectAction.h"
#include "Poco/Web/ExtJS/DirectResponse.h"
#include "Poco/Dynamic/Var.h"
#include <iostream>


namespace Poco {
namespace Web {
namespace ExtJS {


class Web_API DirectHandler: public JSONHandler
	/// Ext.Direct Remoting server-side handler.
	/// Handler takes DirectAction parameter at construction
	/// assembles the list of parameters during parsing 
	/// and automatically calls the DirectAction::invoke() 
	/// member on parsing end event.
	/// 
	/// See http://extjs.com/products/extjs/direct.php for 
	/// Ext.Direct documentation.
{
public:
	typedef DirectAction::ArrayType ArrayType;

	enum Type
	{
		DIRECT_TYPE_NONE,
		DIRECT_TYPE_RPC
	};

	DirectHandler(DirectAction::Ptr pDirectAction);
		/// Creates DirectHandler.

	~DirectHandler();
		/// Destroys DirectHandler.

	virtual void handleArrayBegin();
		/// Handles the array begin event.

	virtual void handleArrayEnd();
		/// Handles the array end event.

	virtual void handleObjectBegin();
		/// Handles the object begin event.

	virtual void handleObjectEnd();
		/// Handles the object end event.

	virtual void handleInteger(const JSONEntity& val);
		/// Handles the integer value event.

	virtual void handleFloat(const JSONEntity& val);
		/// Handles the float value event.

	virtual void handleNull();
		/// Handles the null value event.

	virtual void handleTrue();
		/// Handles the true value event.

	virtual void handleFalse();
		/// Handles the false value event.

	virtual void handleKey(const JSONEntity& val);
		/// Handles the key event.

	virtual void handleString(const JSONEntity& val);
		/// Handles the string value event.

	virtual void handleEnd();
		/// Handles the array end event.

	virtual void handleAction(const std::string& val);
		/// Handles the action.

	virtual void handleMethod(const std::string& val);
		/// Handles the method.

	virtual void handleData(const JSONEntity& val);
		/// Handles data (currently, only arrays are supported).

	virtual void handleType(const std::string& val);
		/// Memorizes type (currenlty always "rpc").

	virtual void handleTID(Poco::Int64 val);
		/// Memorizes the transaction ID.

	Type type() const;
		/// Returns the type.

	const std::string& action() const;
		/// Returns the action.

	const std::string& method() const;
		/// Returns the method.

	typedef Poco::Web::JSONEntity::Integer Integer;
	Integer tid() const;
		/// Returns the transaction ID.

	Poco::Dynamic::Var& get(int pos);
		/// Returns the data value at position pos.

protected:
	bool isArray() const;

private:
	typedef DirectAction::Ptr   ActionPtr;
	typedef DirectResponse::Ptr ResponsePtr;

	void handleValue(const JSONEntity& val);
		/// Handles a value event.

	std::string _key;
	bool        _isArray;
	Type        _type;
	std::string _action;
	std::string _method;
	Integer     _tid;
	ArrayType   _data;
	ActionPtr   _pDirectAction;
};

//
// inlines
//
inline void DirectHandler::handleArrayBegin()
{
	_isArray = true;
}


inline void DirectHandler::handleArrayEnd()
{
	_isArray = false;
}


inline void DirectHandler::handleObjectBegin()
{
}


inline void DirectHandler::handleObjectEnd()
{
}


inline void DirectHandler::handleInteger(const JSONEntity& val)
{
	handleValue(val);
}


inline void DirectHandler::handleFloat(const JSONEntity& val)
{
	handleValue(val);
}


inline void DirectHandler::handleNull()
{
	JSONEntity val(JSONEntity::JSON_T_NULL);
	handleValue(val);
}


inline void DirectHandler::handleTrue()
{
	JSONEntity val(JSONEntity::JSON_T_TRUE);
	handleValue(val);
}


inline void DirectHandler::handleFalse()
{
	JSONEntity val(JSONEntity::JSON_T_FALSE);
	handleValue(val);
}


inline void DirectHandler::handleKey(const JSONEntity& val)
{
	_key = val.toString();
}


inline void DirectHandler::handleString(const JSONEntity& val)
{
	handleValue(val);
}


inline void DirectHandler::handleAction(const std::string& val)
{
	_action = val;
}


inline void DirectHandler::handleMethod(const std::string& val)
{
	_method = val;
}


inline void DirectHandler::handleType(const std::string& val)
{
	if (0 == icompare(val, "rpc"))
		_type = DIRECT_TYPE_RPC;
	else
		throw Poco::InvalidArgumentException("Unknown action", val);
}


inline void DirectHandler::handleTID(Poco::Int64 val)
{
	_tid = val;
}


inline DirectHandler::Type DirectHandler::type() const
{
	return _type;
}


inline const std::string& DirectHandler::action() const
{
	return _action;
}


inline const std::string& DirectHandler::method() const
{
	return _method;
}


inline DirectHandler::Integer DirectHandler::tid() const
{
	return _tid;
}


inline bool DirectHandler::isArray() const
{
	return _isArray;
}


inline Poco::Dynamic::Var& DirectHandler::get(int index)
{
	poco_assert (index < _data.size());
	return _data[index];
}


} } } // namespace Poco::Web::ExtJS


#endif // Web_DirectHandler_INCLUDED
