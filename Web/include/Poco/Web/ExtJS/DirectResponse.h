//
// DirectResponse.h
//
// $Id: //poco/Main/Web/include/Poco/Web/DirectResponse.h#2 $
//
// Library: Web
// Package: Configuration
// Module:  DirectResponse
//
// Definition of the DirectResponse class.
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef Web_DirectResponse_INCLUDED
#define Web_DirectResponse_INCLUDED


#include "Poco/Web/Web.h"
#include "Poco/Web/JSONEntity.h"
#include "Poco/Dynamic/Var.h"
#include "Poco/SharedPtr.h"
#include <sstream>
#include <vector>


namespace Poco {
namespace Web {
namespace ExtJS {


class Web_API DirectResponse
	/// Ext.Direct RPC direct response wrapper.
	/// DirectResponse is passed to DirectHandler as a parameter 
	/// at construction. Direct handler then assembles the list 
	/// of parameters during parsing and automatically calls the 
	/// DirectResponse::invoke() member on parsing end event.
	/// 
	/// See http://extjs.com/products/extjs/direct.php for 
	/// Ext.Direct documentation.
{
public:
	typedef Poco::SharedPtr<DirectResponse>   Ptr;
	
	typedef JSONEntity::Integer Integer;
	typedef JSONEntity::Float   Float;
	typedef JSONEntity::String  String;

	typedef std::vector<Poco::Dynamic::Var> ArrayType;

	DirectResponse(std::ostream& out,
		const std::string& action = "",
		const std::string& method = "",
		Integer tid = -1,
		const std::string& type = "rpc",
		bool formUpload = false);
		/// Creates DirectResponse.

	virtual ~DirectResponse();
		/// Destroys DirectResponse.

	std::ostream& stream();
		/// Returns reference to the output stream.

	virtual void write(const String& result);
		/// Writes the string response to the output stream.
		/// Handles single values only.

	virtual void write(Integer result);
		/// Writes the string response to the output stream.
		/// Handles single values only.

	virtual void write(Float result);
		/// Writes the string response to the output stream.
		/// Handles single values only.

	virtual void writeArray(const ArrayType& result);
		/// Writes the string response to the output stream.
		/// Handles string arrays.

	void setType(const std::string& type);
		/// Sets the type.

	const std::string& getType();
		/// Returns the type.

	void setTID(const Integer tid);
		/// Sets the transaction ID.

	Integer getTID();
		/// Returns the transaction ID.

	void setAction(const std::string& action);
		/// Sets the action.

	const std::string& getAction();
		/// Returns the action.

	void setMethod(const std::string& method);
		/// Sets the method.

	const std::string& getMethod();
		/// Returns the method.

	void setFormUpload(bool formUpload);
		/// Sets the method.

	bool getFormUpload();
		/// Returns the method.

private:
	DirectResponse();

	template <typename T>
	void writeImpl(const T& result, const std::string fmt)
	{
		if (_formUpload) stream() << "<html><body><textarea>";

		std::ostringstream os;
		os << "{\"type\":\"%s\",\"tid\":%Ld,\"action\":\"%s\",\"method\":\"%s\",\"result\":" 
			<< fmt << "}";
		stream() << format(os.str(), _type, _tid, _action, _method, result);

		if (_formUpload) stream() << "</textarea></body></html>";
	}

	std::ostream& _out;
	std::string   _action;
	std::string   _method;
	Integer       _tid;
	std::string   _type;
	bool          _formUpload;
};

//
// inlines
//
inline std::ostream& DirectResponse::stream()
{
	return _out;
}


inline void DirectResponse::write(const String& result)
{
	if (result == "null" || result == "true" || result == "false")
		writeImpl(result, "%s");
	else
		writeImpl(result, "\"%s\"");
}


inline void DirectResponse::write(Integer result)
{
	writeImpl(result, "%Ld");
}


inline void DirectResponse::write(Float result)
{
	writeImpl(result, "%f");
}


inline void DirectResponse::writeArray(const ArrayType& result)
{
	std::ostringstream os; os << '[';
	ArrayType::const_iterator it = result.begin();
	ArrayType::const_iterator end = result.end();
	for (; it != end;)
	{
		if (it->isString()) os << '"';
		if (!it->isEmpty())
			os << it->convert<JSONEntity::String>();
		else
			os << "null";
		if (it->isString()) os << '"';
		if (++it != end) os << ',';
	}
	os << ']';

	writeImpl(os.str(), "%s");
}


inline void DirectResponse::setType(const std::string& type)
{
	_type = type;
}


inline const std::string& DirectResponse::getType()
{
	return _type;
}



inline void DirectResponse::setTID(DirectResponse::Integer tid)
{
	_tid = tid;
}


inline DirectResponse::Integer DirectResponse::getTID()
{
	return _tid;
}


inline void DirectResponse::setAction(const std::string& action)
{
	_action = action;
}


inline const std::string& DirectResponse::getAction()
{
	return _action;
}


inline void DirectResponse::setMethod(const std::string& method)
{
	_method = method;
}


inline const std::string& DirectResponse::getMethod()
{
	return _method;
}


inline void DirectResponse::setFormUpload(bool formUpload)
{
	_formUpload = formUpload;
}


inline bool DirectResponse::getFormUpload()
{
	return _formUpload;
}


} } } // namespace Poco::Web::ExtJS


#endif // Web_DirectResponse_INCLUDED
